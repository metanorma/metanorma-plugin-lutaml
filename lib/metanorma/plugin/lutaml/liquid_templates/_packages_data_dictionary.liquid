{% for package in context.packages %}
{% assign package_name = package.name | downcase | replace: ":", "" | replace: " ", "_" %}
{% if additional_context.before and additional_context.before.size > 0 %}
{% for before in additional_context.before %}
{{ before.text }}
{% endfor %}
{% endif %}
{% capture equalsigns %}{% for count in (1..depth) %}={% endfor %}{% endcapture %}{{equalsigns}} {{ package.name }}
{{equalsigns}}= {{ package.name }}

{% assign before_package_key = 'before;' | append: package.name %}
{% if additional_context[before_package_key] and additional_context[before_package_key].size > 0 %}
{% for before in additional_context[before_package_key] %}
{{ before.text }}
{% endfor %}
{% endif %}

[cols="1a,4a"]
|===

h|Description:    | {{ package.definition }}
h|Parent Package: | {{ context.name }}
h|Stereotype:     | «{{ package.stereotype }}»

|===

{% assign feature_types = package.classes | where: "stereotype", "FeatureType" %}
{% assign object_types = package.classes | where: "stereotype", "ObjectType" %}
{% assign basic_types = package.classes | where: "stereotype", "BasicType" %}
{% assign unions = package.classes | where: "stereotype", "Union" %}
{% assign code_lists = package.classes | where: "stereotype", "CodeList" %}
{% if feature_types.size > 0 or object_types.size > 0 %}
{{equalsigns}}= Classes

{% include "packages_data_dictionary_classes", classes: feature_types %}
{% include "packages_data_dictionary_classes", classes: object_types %}
{% endif %}

{% if basic_types.size > 0 %}
{{equalsigns}}= Basic types

{% include "packages_data_dictionary_classes", classes: basic_types %}
{% endif %}

{% if unions.size > 0 %}
{{equalsigns}}= Unions

{% include "packages_data_dictionary_classes", classes: unions %}
{% endif %}

{% if code_lists.size > 0 %}
{{equalsigns}}= Code lists

{% include "packages_data_dictionary_classes", classes: code_lists %}
{% endif %}

{% if package.data_types.size > 0 %}
{{equalsigns}}= Data types

{% for data_type in package.data_types %}
{% capture generalizations %}{% for assoc in data_type.associations | where: "member_end_type", "generalization" %}{{ assoc.member_end }} {% endfor %}{% endcapture %}
[[{{ data_type.name }}-section]]
[cols="1a"]
|===
|*{{ data_type.name }}*
|[cols="1,4",frame=none,grid=none]
!===
!{nbsp}{nbsp}{nbsp}{nbsp}Definition: ! {{ data_type.definition }}
!{nbsp}{nbsp}{nbsp}{nbsp}Subclass of: ! {{ generalizations }}
!{nbsp}{nbsp}{nbsp}{nbsp}Stereotype: !  «DataType»
!===
{% if data_type.associations.size > 0 %}
{% capture rendered_associations %}
{% for assoc in data_type.associations %}
{% if assoc.member_end_attribute_name.size > 0 %}
{% capture cardinality %}{% if assoc.member_end_cardinality.min == 'C' %}[0..{{ assoc.member_end_cardinality.max }}]{% elsif assoc.member_end_cardinality.min == 'M' and assoc.member_end_cardinality.max == '1' %}[1..1]{% else %}[{{ assoc.member_end_cardinality.max }}]{% endif %}{% endcapture %}
! {{ assoc.member_end_attribute_name }}  !<<{{assoc.member_end}}-section,{{assoc.member_end}}>> {{ cardinality }} ! {{ assoc.definition }}
{% endif %}
{% endfor %}
{% endcapture %}
{% if rendered_associations.size > 0 %}
|[cols="15,20,60",frame=none,grid=none,options="header"]
!===
! *Role name* !*Target class and multiplicity*  !*Definition*
{{ rendered_associations }}
!===
{% endif %}
{% endif %}
{% if data_type.attributes.size > 0 %}
|[cols="15,20,60",frame=none,grid=none,options="header"]
!===
! *Attribute* !*Value type and multiplicity* !*Definition*
{% for attr in data_type.attributes %}
{% capture cardinality %}{% if attr.cardinality.min == 'C' %}[0..{{ attr.cardinality.max }}]{% elsif assoc.member_end_cardinality.min == 'M' and assoc.member_end_cardinality.max == '1' %}[1..1]{% else %}[{{ attr.cardinality.max }}]{% endif %}{% endcapture %}
! {{ attr.name }}  !<<{{ attr.type }}-section,{{ attr.name }}>>  {{ cardinality }} !{{ attr.definition }}
{% endfor %}
!===
| Note: Unless otherwise specified, all attributes and role names have the stereotype «Property».
{% endif %}
|===

{% endfor %}
{% endif %}

{% if package.enums.size > 0 %}
{{equalsigns}}= Enumerations

{% for enum in package.enums %}
{% capture generalizations %}{% for assoc in enum.associations | where: "member_end_type", "generalization" %}{{ assoc.member_end }} {% endfor %}{% endcapture %}
[[{{ enum.name }}-section]]
[cols="1a"]
|===
|*{{ enum.name }}*
|[cols="1,4",frame=none,grid=none]
!===
!{nbsp}{nbsp}{nbsp}{nbsp}Definition: ! {{ enum.definition }}
!{nbsp}{nbsp}{nbsp}{nbsp}Stereotype: ! «Enumeration»
!===
{% if enum.values.size > 0 %}
|[cols="1,4",frame=none,grid=none,options="header"]
!===
^! *Literal value* !*Definition*

{% for val in enum.values %}
^! {{ val.name }}  !{{ val.definition }}
{% endfor %}
!===
{% endif %}
|===

{% endfor %}
{% endif %}

{% if additional_context.include_block and additional_context.include_block.size > 0 %}
{% for block in additional_context.include_block %}
{% capture block_filename %}{{ block.base_path }}{{ package_name }}{% endcapture %}
{% capture block_content %}{% include block_filename %}{% endcapture %}
{% unless block_content contains "Liquid error" %}
{% if block.text %}
{{ block.text }}
{% endif %}
{{ block_content }}
{% endunless %}
{% endfor %}
{% endif %}

{% assign include_block_package_key = 'include_block;' | append: package.name %}
{% if additional_context[include_block_package_key] and additional_context[include_block_package_key].size > 0 %}
{% for block in additional_context[include_block_package_key] %}
{% capture block_filename %}{{ block.base_path }}{{ package_name }}{% endcapture %}
{% capture block_content %}{% include block_filename %}{% endcapture %}
{% unless block_content contains "Liquid error" %}
{% if block.text %}
{{ block.text }}
{% endif %}
{{ block_content }}
{% endunless %}
{% endfor %}
{% endif %}

{% assign after_package_key = 'after;' | append: package.name %}
{% if additional_context[after_package_key] %}
{{equalsigns}}= Additional information
{% for after in additional_context[after_package_key] %}
{{ after.text }}
{% endfor %}
{% endif %}
{% if package.packages.size > 0 and render_nested_packages %}
{% assign nested_depth = depth | plus: 1 %}{% include "packages_data_dictionary", depth: nested_depth, context: package %}
{% endif %}
{% endfor %}

{% if additional_context.after and additional_context.after.size > 0 %}
{% for after in additional_context.after %}
{{ after.text }}
{% endfor %}
{% endif %}
